openapi: "3.0.3"

info:
  title: "Shop Review Api"
  description: |
    # Feature
    - get reviews
    - post reviews
  termsOfService: "https://tastylog.com/terms/"
  contact:
    name: "customer support"
    url: "https://tastylog.com/surpport"
    email: "supoport-desc@tastyl.log"
  # TODO: SPDXについて調べる
  license:
    name: "MIT License"
    url: "https://opensource.org/license/MIT"
  # API定義書のVersion
  version: "1.0.0"

servers:
  #{}で変数を埋め込める
  - url: "http://localhost:{port}"
    description: "local development"
    variables:
      port: 
        enum: ["3000", "8080"]
        default: "3000"
  - url: "https://tastylog.com"
    description: "production development"

tags:
  - name: reviews
    description: "Shop review Operation"

paths:
  "/shops/{shopId}/reviews":
    # get, postのパラメーターの共通部分の切り出し
    parameters:
      - name: shopId
        # パスパラメーターやクエリパラメーターをここで指定することができる
        # query（クエリパラメーター）, header（リクエストヘッダー）, path（パスパラメーター）, cookie(cookie)
        in: path
        description: "Shop idenfifer"
        # パスパラメーターの際には必ずTrue
        required: true
        schema: { type: string }
        example: "m4v517hg"

    get:
      summary: "Get specified shop reivews"
      description: "(description): Get specifed shop reviews"
      tags: ["reviews"]
      # trueにすると打ち消し線が入ってこのエンドポイントは廃止されたという事を明示できる
      deprecated: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "./schemas.yml#/components/schemas/Review"
          description: "success operation"
  
    post:
      summary: "Post specified shop review"
      description: "(description): Post specified shop reviews"
      tags: ["reviews"]
      deprecated: false
      parameters:
          # ケースセンシティブではない
        - name: X-Api-Key
          in: header
          description: "Request user's indenfiger"
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
        - name: token
          in: cookie
          description: "One time token"
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
      requestBody:
        description: "Content of review"
        required: true
        content:
          application/json:
            # schema typeがobjectの場合は同じ階層にpropertiesオブジェクトを設置
            # propertiesオブジェクトの中でプロパティとプロパティの値の型を追加
            schema:
              $ref: "./schemas.yml#/components/schemas/Review"
      responses:
        # 201はレスポンス内容はないけど成功しているという意味
        "201":
          description: "success operation"
          headers:
            location:
              description: "New URL of created review"
              schema: { type: string, format: url }
        "400":
          $ref: "./responses.yml#/components/responses/400-BadRequest"

components:
  # schemaやparameters, requestBodeis, responses, headers, securitSchemayが定義でき、再利用できる。
  schemas:
    SampleInt:
      type: integer
      minimum: 0
      # 最小値を除くかどうか
      exclusiveMinimum: false
      maximum: 100
      # 最大値を除くかどうか
      exclusiveMaximum: true
    
    SampleString:
      type: string
      nullable: true
      minLength: 10
      maxLength: 20

    SampleBoolean:
      type: boolean
    
    sampleObject:
      type: object
      properties:
        shop:
          type: object
          properties:
            name: { type: string }
            place: { type: string, example: "xxxx" }
          # スキーマ以外のオブジェクトを許すかどうか
          additionalProperties: true
          required:
            - name
          # 最小プロパティ
          minProperties: 2
          # 最大プロパティ
          maxProperties: 2
        reviews:
          type: array
          items:
            type: object
            properties:
              score: 
                type: integer
                enum: [1, 2, 3, 4, 5]
              comment: { type: string, example: "Delicious!!" }
            additionalProperties: false
            required:
              - score
              - comment
            minProperties: 2
            maxProperties: 2
