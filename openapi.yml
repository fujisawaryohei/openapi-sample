openapi: "3.0.3"

info:
  title: "Shop Review Api"
  description: |
    # Feature
    - get reviews
    - post reviews
  termsOfService: "https://tastylog.com/terms/"
  contact:
    name: "customer support"
    url: "https://tastylog.com/surpport"
    email: "supoport-desc@tastyl.log"
  # TODO: SPDXについて調べる
  license:
    name: "MIT License"
    url: "https://opensource.org/license/MIT"
  # API定義書のVersion
  version: "1.0.0"

servers:
  #{}で変数を埋め込める
  - url: "http://localhost:{port}"
    description: "local development"
    variables:
      port: 
        enum: ["3000", "8080"]
        default: "3000"
  - url: "https://tastylog.com"
    description: "production development"

paths:
  "/shops/{shopId}/reviews":
    get:
      summary: "Get specified shop reivews"
      description: "(description): Get specifed shop reviews"
      tags: ["shops"]
      # trueにすると打ち消し線が入ってこのエンドポイントは廃止されたという事を明示できる
      deprecated: false
      # パスパラメーターやクエリパラメーターをここで指定することができる
      parameters:
        - name: shopId
          # query（クエリパラメーター）, header（リクエストヘッダー）, path（パスパラメーター）, cookie(cookie)
          in: path
          description: "Shop idenftifer"
          # パスパラメーターの際には必ずTrue
          required: true
          schema: { type: string }
          example: "m4v517hg"
      responses:
        "200":
          description: "success operation"
  
  "/shps/{shopId}/reviews":
    post:
      summary: "Post specified shop review"
      description: "(description): Post specified shop reviews"
      tags: ["shops"]
      deprecated: false
      parameters:
        - name: shopId
          in: path
          description: "Shop idenftifer"
          required: true
          schema: { type: string }
          example: "m4v517hg"
          # ケースセンシティブではない
        - name: X-Api-Key
          in: header
          description: "Request user's indenfiger"
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
        - name: token
          in: cookie
          description: "One time token"
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
      requestBody:
        description: "Content of review"
        required: true
        content:
          application/json:
            # schema typeがobjectの場合は同じ階層にpropertiesオブジェクトを設置
            # propertiesオブジェクトの中でプロパティとプロパティの値の型を追加
            schema:
              type: object
              properties:
                  score: { type: integer, example: 3 }
                  comment: { type: string, example: "Delicious!!" }
      responses:
        # 201はレスポンス内容はないけど成功しているという意味
        "201":
          description: "success operation"
          headers:
            location:
              description: "New URL of created review"
              schema: { type: string, format: url }
        "400":
          description: "Client side error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: string }
                  type: { type: string }
                  message: { type: string }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field: { type: string }
                        code: { type: string }